{"title": "自动化灌装生产线控制", "description": "一个自动化灌装生产线负责对瓶子进行清洗、灌装、封盖和包装。生产线的每个步骤都由PLC控制，并且由传感器和操作员的输入信号触发。\n控制要求：\n当传感器bottleSensor检测到瓶子时，触发清洗泵启动并持续工作。\n清洗完成后，由操作员操作按钮cleaningConfirmButton触发清洗完成信号，自动启动灌装阀进行灌装。\n灌装完成后，由操作员操作按钮fillingConfirmButton触发灌装完成信号，自动启动封盖机进行封盖。\n封盖完成后，由操作员操作按钮cappingConfirmButton触发封盖完成信号，启动包装机进行包装。\n包装完成后，由操作员操作按钮packingConfirmButton触发包装完成信号，点亮包装完成指示灯。\n操作员取走包装好的瓶子后，按下确认按钮finishedButton复位指示灯，并为下一个瓶子的生产循环做准备。", "type": "FUNCTION_BLOCK", "name": "FB_BottleProcessing", "input": [{"name": "bottleSensor", "type": "Bool", "description": "瓶子到达传感器，检测到瓶子时触发信号"}, {"name": "cleaningConfirmButton", "type": "Bool", "description": "操作员确认按钮，用于确认清洗工序完成"}, {"name": "fillingConfirmButton", "type": "Bool", "description": "操作员确认按钮，用于确认灌装工序完成"}, {"name": "cappingConfirmButton", "type": "Bool", "description": "操作员确认按钮，用于确认封盖工序完成"}, {"name": "packingConfirmButton", "type": "Bool", "description": "操作员确认按钮，用于确认包装工序完成"}, {"name": "finishedButton", "type": "Bool", "description": "操作员确认按钮，用于确认瓶子已取走"}], "output": [{"name": "Pump_Motor", "type": "Bool", "description": "控制清洗泵电机的运行输出"}, {"name": "Filling_Valve", "type": "Bool", "description": "控制灌装阀的运行输出"}, {"name": "Capping_Machine", "type": "Bool", "description": "控制封盖机的运行输出"}, {"name": "Packing_Machine", "type": "Bool", "description": "控制包装机的运行输出"}, {"name": "Completion_Light", "type": "Bool", "description": "包装完成指示灯"}], "in/out": [], "return_value": []}
{"title": "计算一年中的第几天", "description": "在某些自动化系统中，可能需要根据当前日期计算出它是一年中的第几天。这可以用于追踪生产周期、维护计划或其他需要日期信息的场合。\n控制要求：\n系统需要接收日期输入，包括年、月、日。\n根据输入的日期，计算并输出它是一年中的第几天。\n考虑到不同年份的2月天数可能不同（平年28天，闰年29天），系统需要能够识别闰年并相应地计算。\n输出结果应该是一个整数，表示一年中的第几天。\n如果输入的日期不合法（如2月30日、4月31日等），系统应输出错误状态和错误代码。\n说明：\n1. 要求输入的年份Year在1000到3000之间（包括1000和3000），否则输出错误状态error=true和错误代码status=16#8001。如果输入的月份Month不合法，则输出错误状态error=true和错误代码status=16#8002。如果输入的日Day不合法，则输出错误状态error=true和错误代码status=16#8003。\n2. 计算的结果通过DayOfYear输出。", "type": "FUNCTION_BLOCK", "name": "FB_CalculateDayOfYear", "input": [{"name": "Year", "type": "Int", "description": "年份输入"}, {"name": "Month", "type": "Int", "description": "月份输入"}, {"name": "Day", "type": "Int", "description": "日输入"}], "output": [{"name": "DayOfYear", "type": "Int", "description": "一年中的第几天输出"}, {"name": "error", "type": "Bool", "description": "错误状态指示\nFALSE: 没有发生错误\nTRUE: 执行出错"}, {"name": "status", "type": "Word", "description": "状态代码"}], "in/out": [], "return_value": []}
{"title": "控制台指示灯顺序控制", "description": "某控制台装有3个指示灯，分别为绿色、红色和黄色。需要通过一个控制按钮来循环控制这些灯的状态。\n控制要求：\n使用一个输入参数controlButton表示控制按钮的状态，该按钮为脉冲信号，每次触发时产生一个从0到1的跳变。\n使用三个输出参数greenLight、redLight、yellowLight分别来控制对应的绿色、红色和黄色指示灯。\n控制按钮触发的顺序和对应指示灯的状态如下：\n第1次触发：只有绿灯greenLight亮。\n第2次触发：只有红灯redLight亮。\n第3次触发：只有黄灯yellowLight亮。\n第4次触发：3个灯都亮。\n第5次触发：3个灯都灭。\n第6次触发及以后：重复上述循环。", "type": "FUNCTION_BLOCK", "name": "FB_ColorLightControl", "input": [{"name": "controlButton", "type": "Bool", "description": "控制按钮开关，脉冲信号"}], "output": [{"name": "greenLight", "type": "Bool", "description": "绿色指示灯"}, {"name": "redLight", "type": "Bool", "description": "红色指示灯"}, {"name": "yellowLight", "type": "Bool", "description": "黄色指示灯"}], "in/out": [], "return_value": []}
{"title": "PLC数据库数据存储与管理系统", "description": "在一些自动化应用中，PLC需要收集和存储大量的数据，例如传感器读数、生产计数或其他过程变量。这些数据通常存储在PLC的内部数据库或外部数据库系统中。\n控制要求：\n系统需要接收一组数据dataInput，以字节数组构建，这组数据的第一个字节dataInput[0]表示要存入的数据字节长度。\n数据的存储操作由输入storeTrigger触发。\n数据需要依次存入数据库，每组数据长度可能不同。\n当数据库剩余空间不足以存入新的一组数据时，系统应触发报错error。\n系统应提供一个复位功能，通过输入resetTrigger来清空数据库，并重置error。\n系统应能够输出数据库的当前使用情况和剩余空间。\n说明：\n1. 当存储信号storeTrigger触发时，首先检查数据输入长度信息（即数组的首字节dataInput[0]）是否非法，如果小于等于0或大于5，则输出错误状态error=true和错误代码status=16#8001。如果数据库剩余空间不足以存入新数据，则输出错误状态error=true和错误代码status=16#8002。如果没有这些错误，则根据长度信息，把从输入数组的第二字节开始的数据取出，并存入数据库。存入时不能覆盖数据库原有的数据，从原有数据之后依次存入。\n2. 当复位信号resetTrigger触发时，清空数据库中所有数据，并复位错误状态error=0和status=0。\n3. 数据库已使用空间和剩余空间分别通过usedSpace和remainingSpace输出。", "type": "FUNCTION_BLOCK", "name": "FB_DatabaseManager", "input": [{"name": "dataInput", "type": "Array[0..5] of Byte", "description": "数据输入，字节数组"}, {"name": "storeTrigger", "type": "Bool", "description": "存储触发信号"}, {"name": "resetTrigger", "type": "Bool", "description": "复位触发信号"}], "output": [{"name": "usedSpace", "type": "Int", "description": "数据库已使用空间"}, {"name": "remainingSpace", "type": "Int", "description": "数据库剩余空间"}, {"name": "error", "type": "Bool", "description": "错误状态指示\nFALSE:没有发生错误\nTRUE:执行出错"}, {"name": "status", "type": "Word", "description": "状态代码"}], "in/out": [{"name": "dataBase", "type": "Array[1..20] of Byte", "description": "数据库，字节数组"}], "return_value": []}
{"title": "浮点数区间线性化转换", "description": "在一些自动化控制系统中，可能需要将一个物理量（如温度、压力等）的测量值转换为另一个线性化或标准化的值，以便于控制算法的处理或显示。例如，一个传感器测量的物理量可能在特定的非线性区间内变化，但控制系统需要一个线性化的值来进行计算。\n控制要求：\n系统需要接收一个浮点数作为输入，表示原始测量值。\n根据输入值的大小，将其转换到不同的线性区间，输出转换后的线性化值。\n当输入值在1200到3600之间，则转换到150到240之间。\n当输入值在3600到4800之间，则转换到240到560之间。\n当输入值在4800到7000之间，则转换到560到720之间。\n如果输入值小于1200或大于7000，则转换后的值应为1200或7000对应的线性化值，并输出错误状态error=1，status=16#8001。", "type": "FUNCTION_BLOCK", "name": "FB_LinearizeValue", "input": [{"name": "InputValue", "type": "Real", "description": "浮点数输入，原始测量值"}], "output": [{"name": "LinearizedValue", "type": "Real", "description": "转换后的线性化值"}, {"name": "Error", "type": "Bool", "description": "错误状态指示\nFALSE: 没有发生错误\nTRUE: 执行出错"}, {"name": "Status", "type": "Word", "description": "状态代码"}], "in/out": [], "return_value": []}
{"title": "自动化生产线控制", "description": "一个简单的自动化生产线由三个工作站组成：工作站A、工作站B和工作站C。产品需要经过这三个站的依次加工后才算全部完成。生产线有一个电机，负责将产品从一个工作站移动到下一个工作站，生成线的顺序是从工作站A到工作站B，再到工作站C。每个工作站都有一个传感器（用于检测产品是否到达）以及一个按钮（用于触发本站加工完成信号）。\n控制要求：\n1. 模式切换：转换开关（Mode）用于切换生产线的手动和自动模式。\n2. 手动模式：在手动模式下，电机正转按钮（ForwardButton）控制电机正转，电机反转按钮（ReverseButton）控制电机反转，正反转操作需要互锁，不能同时进行。\n3. 自动模式：\n   - 产品到达工作站A，SensorA检测到产品，操作员通过ButtonA触发加工完成信号后，电机启动正转，将产品移动到工作站B。\n   - 产品到达工作站B，SensorB检测到产品，电机停止，操作员通过ButtonB触发加工完成信号后，电机启动正转，将产品移动到工作站C。\n   - 产品到达工作站C，SensorC检测到产品，电机停止，操作员通过ButtonC触发加工完成信号后，加工完成指示灯（CompletionLight）亮起，指示产品加工完成。当产品被取走，也就是SensorC检测不到产品了，加工完成指示灯（CompletionLight）熄灭。", "type": "FUNCTION_BLOCK", "name": "FB_ProductionLineControl", "input": [{"name": "Mode", "type": "Bool", "description": "用于切换生产线的手动和自动模式，0=手动模式，1=自动模式"}, {"name": "ForwardButton", "type": "Bool", "description": "正转按钮"}, {"name": "ReverseButton", "type": "Bool", "description": "反转按钮"}, {"name": "SensorA", "type": "Bool", "description": "传感器A"}, {"name": "SensorB", "type": "Bool", "description": "传感器B"}, {"name": "SensorC", "type": "Bool", "description": "传感器C"}, {"name": "ButtonA", "type": "Bool", "description": "按钮A"}, {"name": "ButtonB", "type": "Bool", "description": "按钮B"}, {"name": "ButtonC", "type": "Bool", "description": "按钮C"}], "output": [{"name": "MotorForward", "type": "Bool", "description": "电机正转输出"}, {"name": "MotorReverse", "type": "Bool", "description": "电机反转输出"}, {"name": "CompletionLight", "type": "Bool", "description": "产品加工完成指示灯"}], "in/out": [], "return_value": []}
{"title": "配方管理系统", "description": "某工厂的生产线需要根据不同的配方生产多种产品。生产线的控制中心需要一个配方管理系统，允许操作员添加、删除、修改和查询配方数据。\n控制要求：\n配方数据应包括配方编号、原料类型、原料比例和生产温度。\n系统应允许输入新的配方数据，并将其存储在配方数据库中。\n系统应允许通过配方编号删除或修改现有的配方数据。\n系统应允许通过配方编号查询配方详情，并输出该配方。\n说明：\n1. 配方以结构体Struct数据类型构建，结构体内包括配方编号recipeID、原料类型ingredientType、原料比例ingredientRatio和生产温度productionTemperature。配方数据库最多可以存放10条配方，以数组Array[1..10] of Struct构建，配方编号不能重复，配方编号=0表示该位置空闲。\n2. 当触发查询配方请求信号queryRecipe时，首先根据输入配方recipeIn中的配方编号recipeID比对配方数据库recipe中的所有配方，如果不存在该编号，则输出错误状态error=true和错误代码status=16#8001。如果存在该编号，则把该条配方输出到配方查询结果recipeQueryResult。\n3. 当触发添加配方请求信号addRecipe时，首先根据输入配方recipeIn中的配方编号recipeID比对配方数据库recipe中的所有配方，如果存在重号，则输出错误状态error=true和错误代码status=16#8002。如果配方数据库recipe中没有空余位置，则输出错误状态error=true和错误代码status=16#8003。如果不存在这些错误，则把输入配方recipeIn存入配方数据库recipe，优先存入数组编号小的空闲位置。\n4. 当触发删除配方请求信号deleteRecipe时，首先根据输入配方recipeIn中的配方编号recipeID比对配方数据库recipe中的所有配方，如果不存在该编号，则输出错误状态error=true和错误代码status=16#8004。如果存在该编号，则删除该配方，即把配方数据库recipe中的该条配方编号recipeID置为0。\n5. 当触发修改配方请求信号modifyRecipe时，首先根据输入配方recipeIn中的配方编号recipeID比对配方数据库recipe中的所有配方，如果不存在该编号，则输出错误状态error=true和错误代码status=16#8005。如果存在该编号，则把该条配方替换为输入配方recipeIn。", "type": "FUNCTION_BLOCK", "name": "FB_RecipeManager", "input": [{"name": "addRecipe", "type": "Bool", "description": "添加配方请求信号"}, {"name": "deleteRecipe", "type": "Bool", "description": "删除配方请求信号"}, {"name": "modifyRecipe", "type": "Bool", "description": "修改配方请求信号"}, {"name": "queryRecipe", "type": "Bool", "description": "查询配方请求信号"}, {"name": "recipeIn", "type": "Struct", "description": "输入配方", "fields": [{"name": "recipeID", "type": "Int", "description": "配方编号"}, {"name": "ingredientType", "type": "Int", "description": "原料类型"}, {"name": "ingredientRatio", "type": "Real", "description": "原料比例"}, {"name": "productionTemperature", "type": "Real", "description": "生产温度"}]}], "output": [{"name": "recipeAdded", "type": "Bool", "description": "配方添加成功指示"}, {"name": "recipeDeleted", "type": "Bool", "description": "配方删除成功指示"}, {"name": "recipeModified", "type": "Bool", "description": "配方修改成功指示"}, {"name": "recipeQueryResult", "type": "Struct", "description": "配方查询结果输出", "fields": [{"name": "recipeID", "type": "Int", "description": "配方编号"}, {"name": "ingredientType", "type": "Int", "description": "原料类型"}, {"name": "ingredientRatio", "type": "Real", "description": "原料比例"}, {"name": "productionTemperature", "type": "Real", "description": "生产温度"}]}, {"name": "error", "type": "Bool", "description": "错误状态指示\nFALSE: 没有发生错误\nTRUE: 执行出错"}, {"name": "status", "type": "Word", "description": "状态代码"}], "in/out": [{"name": "recipe", "type": "Array[1..10] of Struct", "description": "配方数据库", "fields": [{"name": "recipeID", "type": "Int", "description": "配方编号"}, {"name": "ingredientType", "type": "Int", "description": "原料类型"}, {"name": "ingredientRatio", "type": "Real", "description": "原料比例"}, {"name": "productionTemperature", "type": "Real", "description": "生产温度"}]}], "return_value": []}
{"title": "数字位分离显示", "description": "在一些自动化系统中，可能需要将一个整数的各个位分离出来，以便于显示或进一步处理。例如，在一些计数器或生产计数应用中，需要将当前的计数值分离成个位、十位、百位和千位。\n控制要求：\n系统需要接收一个最多四位整数作为输入。\n根据输入的整数，计算并输出其个位、十位、百位和千位数值。\n如果输入的整数少于四位，则在缺失的高位上显示0。\n输出结果应该是四个独立的整数，分别代表个位、十位、百位和千位。\n说明：\n1. 要求输入的整数InputNumber大于等于0且小于10000，否则输出错误状态error=true和错误代码status=16#8001。\n2. 在计算出个、十、百、千这四个数位的数值后，对这四个数位值中非0的值进行比较并输出最小值到Min；如果InputNumber=0，则输出Min=0。", "type": "FUNCTION_BLOCK", "name": "FB_SplitNumber", "input": [{"name": "InputNumber", "type": "Int", "description": "四位整数输入"}], "output": [{"name": "Thousands", "type": "Byte", "description": "千位数值输出"}, {"name": "Hundreds", "type": "Byte", "description": "百位数值输出"}, {"name": "Tens", "type": "Byte", "description": "十位数值输出"}, {"name": "Ones", "type": "Byte", "description": "个位数值输出"}, {"name": "Min", "type": "Byte", "description": "四个数位中的非0最小值"}, {"name": "error", "type": "Bool", "description": "错误状态指示\nFALSE: 没有发生错误\nTRUE: 执行出错"}, {"name": "status", "type": "Word", "description": "状态代码"}], "in/out": [], "return_value": []}
{"title": "16位二进制数分解为四个4位二进制数", "description": "在一些数据处理和通信应用中，需要将一个16位的二进制数分解成四个独立的4位二进制数。例如，在数据编码、解码或与外部系统的数据交换时，可能需要这种分解操作。\n控制要求：\n系统需要接收一个16位的二进制数InputWord作为输入。\n将输入的16位二进制数分解成四个4位的二进制数，分别对应输入数的最低位到最高位。\n输出这四个4位二进制数到独立的变量Byte0~Byte3中。\n同时对这4个变量Byte0~Byte3中非0的变量求取平均值，并输出到average。\n例如，InputWord=16#1203，则Byte0=3，Byte1=0，Byte2=2，Byte3=1，那么平均值average=(1+2+3)/3", "type": "FUNCTION_BLOCK", "name": "FB_SplitWordIntoBytes", "input": [{"name": "InputWord", "type": "Word", "description": "16位二进制数输入"}], "output": [{"name": "Byte0", "type": "Byte", "description": "最低的4位二进制数输出"}, {"name": "Byte1", "type": "Byte", "description": "次低的4位二进制数输出"}, {"name": "Byte2", "type": "Byte", "description": "次高的4位二进制数输出"}, {"name": "Byte3", "type": "Byte", "description": "最高的4位二进制数输出"}, {"name": "average", "type": "Real", "description": "四个字节中非零字节的平均值"}], "in/out": [], "return_value": []}
{"title": "自动化仓库货架位置管理系统", "description": "一个自动化仓库需要一个系统来管理工件的存放位置，确保工件能够高效地被存取。仓库里有一个货架，共有9层，每层编号从1到9，每层仅能存放一件工件。\n控制要求：\n1. 系统需要维护货架的存储状态，记录每层是否存放工件。\n2. 当工件入库时：\n   - 查询货架的存储状态。\n   - 如果有空闲位置，优先存放编号大的位置。\n   - 如果所有位置都被占用，则输出错误状态error=1和错误代码status16#8001。\n3. 当工件出库时：\n   - 查询货架的存储状态。\n   - 如果货架上有工件，优先取出位置编号小的工件。\n   - 如果所有位置都为空，则输出错误状态error=1和错误代码status16#8002。\n4. 系统应能输出当前工件库存数量和货架空闲位置数量。", "type": "FUNCTION_BLOCK", "name": "FB_WarehouseManagement", "input": [{"name": "requestIn", "type": "Bool", "description": "入库请求信号"}, {"name": "requestOut", "type": "Bool", "description": "出库请求信号"}], "output": [{"name": "productNum", "type": "Int", "description": "工件库存数量"}, {"name": "libFreeNum", "type": "Int", "description": "货架空闲位置数量"}, {"name": "error", "type": "Bool", "description": "FALSE: 没有发生错误\nTRUE: 执行出错"}, {"name": "status", "type": "Word", "description": "状态代码"}], "in/out": [{"name": "library", "type": "Array[1..9] of Bool", "description": "货架每层的占用状态，1表示占用，0表示空闲"}], "return_value": []}
